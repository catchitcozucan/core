/**
 *    Original work by Ola Aronsson 2020
 *    Courtesy of nollettnoll AB &copy; 2012 - 2020
 *
 *    Licensed under the Creative Commons Attribution 4.0 International (the "License")
 *    you may not use this file except in compliance with the License. You may obtain
 *    a copy of the License at
 *
 *                https://creativecommons.org/licenses/by/4.0/
 *
 *    The software is provided “as is”, without warranty of any kind, express or
 *    implied, including but not limited to the warranties of merchantability,
 *    fitness for a particular purpose and noninfringement. In no event shall the
 *    authors or copyright holders be liable for any claim, damages or other liability,
 *    whether in an action of contract, tort or otherwise, arising from, out of or
 *    in connection with the software or the use or other dealings in the software.
 */
package com.github.catchitcozucan.core.impl.source.processor;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import javax.lang.model.element.Element;

import com.github.catchitcozucan.core.MakeStep;
import com.github.catchitcozucan.core.util.MavenWriter;

public class DaProcessStepConstants {
	public static final String UNDERSCORE = "_";
	public static final String DOT = ".";
	public static final String SLASH = "/";
	public static final String NL = System.getProperty("line.separator");
	public static final Charset UTF8_CHARSET = StandardCharsets.UTF_8;
	public static final String TYPES = "types";
	public static final String TSYM = "tsym";
	public static final String CLASSFILE = "classfile";
	public static final String FILE = "file";
	public static final String EMPTY = "";
	static final String COM_SUN_TOOLS_JAVAC_FILE_REGULAR_FILE_OBJECT = "com.sun.tools.javac.file.RegularFileObject";
	static final String INTRO_TEXT_NO_TABS = "The following code is generated by the DaProcessStepProcessor";
	static final String INTRO_TEXT = "    // The following code is generated by the DaProcessStepProcessor ";
	static final String CHKSUMPREFIX = "    ///////CHKSUM: ";
	static final String HEADER_START_NEW = new StringBuilder(NL).append(CHKSUMPREFIX).toString();
	static final int CHKSUM_POS = HEADER_START_NEW.length() + 1;
	static final int CHKSUM_LEN = 40;
	static final String SPACES_AND_SLASHES = "    //";
	static final String COMMENT_HEADER = new StringBuilder().append(CHKSUMPREFIX).append("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX////////////////////////").append(NL).append(SPACES_AND_SLASHES).append(NL).append(INTRO_TEXT).append(NL).append("    // written by Ola Aronsson in 2020, courtesy of nollettnoll AB").append(NL).append(SPACES_AND_SLASHES).append(NL).append("    // DO NOT edit this " +
			"section. Modify @MakeStep or CHKSUM (then keep length)  to re-generate.").append(NL).append(SPACES_AND_SLASHES).append(NL).toString();
	static final String HEADER_START_OLD = new StringBuilder("    ///////////////////////////////////////////////////////////////////////////////").toString();
	static final String ANNOT_MAKESTEP_JAVA_PATH = "com.github.catchitcozucan.core.MakeStep";
	static final String ANNOT_PROCESSSTATUS_JAVA_PATH = "com.github.catchitcozucan.core.ProcessStatus";
	static final String ANNOT_COMPILEOPTIONS_JAVA_PATH = "com.github.catchitcozucan.core.CompileOptions";
	static final Set<String> NEN_BLACK_PROCESS_MAKESTEP_SUPPORTED_TYPES = new HashSet<>(Arrays.asList(ANNOT_MAKESTEP_JAVA_PATH, ANNOT_PROCESSSTATUS_JAVA_PATH, ANNOT_COMPILEOPTIONS_JAVA_PATH));
	static final String COMMENT_HEADER_SIGN = "written by Ola Aronsson";
	static final String COMMENT_HEADER_END = new StringBuilder().append(NL).append(HEADER_START_OLD).append(NL).append(SPACES_AND_SLASHES).append(NL).append("    // End DaProcessStepProcessor generation").append(NL).append(SPACES_AND_SLASHES).append(NL).toString();
	static final String NONE = "NONE";
	static final String THEEND = COMMENT_HEADER_END + NL + "}";
	static final String OVERRIDE = "        @Override";
	static final String SPACES_AND_CURLY = "        }";
	static final String SIGN_PART = "    private final com.github.catchitcozucan.core.ProcessStep ";
	static final String STEP = "Step";
	static final String CURLY_RIGHT = "}";
	static final String CHKSUM = "CHKSUM";
	static final String CHKSUM_AND_COLON = "CHKSUM:";
	static String CHKSUM_ORIG = "NOCHANGESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"; // NOSONAR
	static final String OWNER = "owner";
	static final String TYPE = "type";
	static final String SPACE = " ";
	private static final String SPACEDDASH = " - ";
	private static final String MAKE_STEPS_SHORT_CLASS_NAME = MakeStep.class.getSimpleName();
	private static final String MAVEN_LOG_PREFIX = new StringBuilder(MAKE_STEPS_SHORT_CLASS_NAME).append(SPACEDDASH).toString();
	//@formatter:off
    static final String BODY = new StringBuilder("new com.github.catchitcozucan.core.ProcessStep(){ ")
            .append(NL)
            .append(NL)
            .append(OVERRIDE)
            .append(NL)
            .append("        public void execute() {")
            .append(NL)
            .append("            %s();")
            .append(NL)
            .append(SPACES_AND_CURLY)
            .append(NL)
            .append(NL)
            .append(OVERRIDE)
            .append(NL)
            .append("        public String processName() {")
            .append(NL)
            .append("            return \"%s\";")
            .append(NL)
            .append(SPACES_AND_CURLY)
            .append(NL)
            .append(NL)
            .append(OVERRIDE)
            .append(NL)
            .append("        public String description() {")
            .append(NL)
            .append("            return \"%s\";")
            .append(NL)
            .append(SPACES_AND_CURLY)
            .append(NL)
            .append(NL)
            .append(OVERRIDE)
            .append(NL)
            .append("        public Enum<?> statusUponSuccess() {")
            .append(NL)
            .append("            return %s.%s;")
            .append(NL)
            .append(SPACES_AND_CURLY)
            .append(NL)
            .append(NL)
            .append(OVERRIDE)
            .append(NL)
            .append("        public Enum<?> statusUponFailure() {")
            .append(NL)
            .append("            return %s.%s;")
            .append(NL)
            .append(SPACES_AND_CURLY)
            .append(NL)
            .append(NL)
            .append("    };")
            .append(NL).toString();
    //@formatter:on

	static final String NAME = "    public static final String PROCESS_NAME = %s.class.getName().toUpperCase();"; // just the proceess class name
	static final String NAME_SHORT = "    public static final String PROCESS_NAME_SHORT = %s.class.getSimpleName().toUpperCase();"; // just the proceess class name

	//@formatter:off (Full status class name x3)
	static final String FINISH_STATE = new StringBuilder("    public static final Enum<?> FINISH_STATE = %s.values()[%s.values().length - 1];").append(NL).toString();
	//@formatter:on

	//@formatter:off (Full status class name x3)
	static final String CRITERIA_STATES = new StringBuilder("    public static final %s[] CRITERIA_STATES = {")
			.append("NEW_AND_FAIL_STATES")
			.append(NL).append("    };").append(NL).toString();
    //@formatter:on

	public static final String SPACE_RIGHT_CURLY = "    }";
	static final String CRITERIA_STATES_AS_STRINGS = new StringBuilder("    public static java.util.List<String> criteriaProcessesStatusesAsStrings() {").append(NL)
			.append("        return java.util.Arrays.asList(CRITERIA_STATES).stream().map(Enum::name).collect(java.util.stream.Collectors.toList());")
			.append(NL).append(SPACE_RIGHT_CURLY).append(NL).toString();
	//@formatter:on

	//@formatter:off (Full status class name x3)
	static final String ALL_STATES_AS_STRINGS = new StringBuilder("    public static java.util.List<String> allProcessesStatusesAsStrings() {").append(NL)
			.append("        return java.util.Arrays.asList(%s.values()).stream().map(Enum::name).collect(java.util.stream.Collectors.toList());")
			.append(NL).append(SPACE_RIGHT_CURLY).toString();
	//@formatter:on

	//@formatter:off
	static final String PROCESS_INTERNAL = new StringBuilder("    public void processInternal(%s currentStatus) {").append(NL)
		.append("        switch (currentStatus) {").append(NL)
		.append("STATUSES_AND_STEPS")
		.append("            default:").append(NL)
		.append("                throw new ProcessRuntimeException(String.format(\"Got bad input : FORMATTER FORMATTER which is in state FORMATTER [FORMATTER]\",").append(NL)
		.append("                    PROCESS_NAME,").append(NL)
		.append("                    getSubject().id(),").append(NL)
		.append("                    getSubject().getCurrentStatus().name(),").append(NL)
		.append("                    currentStatusDescription()));").append(NL)
		.append("         }").append(NL)
		.append(SPACE_RIGHT_CURLY).append(NL).toString();
	//@formatter:on

	static final String COM_SUN_TOOLS_JAVAC_FILE_PATH_FILE_OBJECT = "com.sun.tools.javac.file.PathFileObject";

	private DaProcessStepConstants() {}

	static void error(String msg) {
		MavenWriter.getInstance().error(mkMessage(msg));
	}

	public static void info(String msg) {
		MavenWriter.getInstance().info(mkMessage(msg));
	}

	public static void warn(String msg) {
		MavenWriter.getInstance().warn(mkMessage(msg));
	}

	static void error(Element e, String msg, Object... args) {
		MavenWriter.getInstance().error(e, mkMessage(msg), args);
	}

	private static String mkMessage(String mess) {
		return new StringBuilder(MAVEN_LOG_PREFIX).append(mess).toString();
	}
}
