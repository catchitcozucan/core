package com.github.catchitcozucan.core.demo.shoe;

import com.github.catchitcozucan.core.CompileOptions;
import com.github.catchitcozucan.core.MakeStep;
import com.github.catchitcozucan.core.demo.shoe.internal.LaceProvider;
import com.github.catchitcozucan.core.demo.shoe.internal.ShoeProvider;
import com.github.catchitcozucan.core.demo.test.support.io.IO;
import com.github.catchitcozucan.core.exception.ProcessRuntimeException;
import com.github.catchitcozucan.core.impl.ProcessBase;
import com.github.catchitcozucan.core.interfaces.PersistenceService;

@CompileOptions(relativeBpmDirectoryPath = "../../../../../../../resources/bpmSchemes", bpmActivitiesPerColumn = "3")
public class ShipAShoeProcess extends ProcessBase<Order> {

    public ShipAShoeProcess(Order order, PersistenceService persistenceService) {
        super(order, persistenceService);
    }

    // typically a switch for processSubject.status
    // calling different private methods depending on particular state
    @Override
    public void process() {
        OrderStatus.Status status = (OrderStatus.Status) getSubject().getCurrentStatus();
        processInternal(status);
    }

    // returning an array of states to dig up for processeing from the database
    @Override
    public Enum<?>[] criteriaStates() {
        return CRITERIA_STATES;
    }

    // declaring the state upon which we consider the processing to be finished
    @Override
    public Enum<?> finishedState() {
        return FINISH_STATE;
    }

    @Override
    public String name() {
        return PROCESS_NAME_SHORT;
    }

    @MakeStep(statusUponFailure = "Status.SHOE_NOT_YET_AVAILABLE", statusUponSuccess = "Status.SHOE_FETCHED_FROM_WAREHOUSE", description = "getShoe", enumStateProvider = com.github.catchitcozucan.core.demo.shoe.OrderStatus.class, sourceEncoding = IO.UTF_8)
    private void doGetShoe() {
        getSubject().setShoe(ShoeProvider.getInstance().getShoe(getSubject().getRequestedColor(), getSubject().getRequestedSize()));
    }

    @MakeStep(statusUponFailure = "Status.LACES_NOT_IN_PLACE", statusUponSuccess = "Status.LACES_IN_PLACE", description = "fetchLaces", enumStateProvider = com.github.catchitcozucan.core.demo.shoe.OrderStatus.class, sourceEncoding = IO.UTF_8)
    private void doGetLaces() {
        getSubject().getShoe().setLaces(LaceProvider.getInstance().getFreshLaces());
    }

    @MakeStep(statusUponFailure = "Status.PACKAGING_FAILED", statusUponSuccess = "Status.PACKED", description = "packaging", enumStateProvider = com.github.catchitcozucan.core.demo.shoe.OrderStatus.class, sourceEncoding = IO.UTF_8)
    private void doGetPackaging() {
        getSubject().packageOrder();
    }

    @MakeStep(statusUponFailure = "Status.SHIPPING_FAILED", statusUponSuccess = "Status.SHIPPED", description = "shipping", enumStateProvider = com.github.catchitcozucan.core.demo.shoe.OrderStatus.class, sourceEncoding = IO.UTF_8)
    private void doSendPackage() {
        getSubject().send();
    }

    ///////CHKSUM: 38347AD51A5105CC3136880C85908DE6XXXXXXXX/////////////////////
    //
    // The following code is generated by the DaProcessStepProcessor 
    // written by Ola Aronsson in 2020, courtesy of nollettnoll AB
    //
    // DO NOT edit this section. Modify @MakeStep or CHKSUM (then keep length)  to re-generate.
    //

    //@formatter:off DO_NOT_FORMAT

    private final com.github.catchitcozucan.core.ProcessStep doGetShoeStep = new com.github.catchitcozucan.core.ProcessStep(){ 

        @Override
        public void execute() {
            doGetShoe();
        }

        @Override
        public String processName() {
            return "SHIPASHOEPROCESS";
        }

        @Override
        public String description() {
            return "getShoe";
        }

        @Override
        public Enum<?> statusUponSuccess() {
            return com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.SHOE_FETCHED_FROM_WAREHOUSE;
        }

        @Override
        public Enum<?> statusUponFailure() {
            return com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.SHOE_NOT_YET_AVAILABLE;
        }

    };

    private final com.github.catchitcozucan.core.ProcessStep doSendPackageStep = new com.github.catchitcozucan.core.ProcessStep(){ 

        @Override
        public void execute() {
            doSendPackage();
        }

        @Override
        public String processName() {
            return "SHIPASHOEPROCESS";
        }

        @Override
        public String description() {
            return "shipping";
        }

        @Override
        public Enum<?> statusUponSuccess() {
            return com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.SHIPPED;
        }

        @Override
        public Enum<?> statusUponFailure() {
            return com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.SHIPPING_FAILED;
        }

    };

    private final com.github.catchitcozucan.core.ProcessStep doGetLacesStep = new com.github.catchitcozucan.core.ProcessStep(){ 

        @Override
        public void execute() {
            doGetLaces();
        }

        @Override
        public String processName() {
            return "SHIPASHOEPROCESS";
        }

        @Override
        public String description() {
            return "fetchLaces";
        }

        @Override
        public Enum<?> statusUponSuccess() {
            return com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.LACES_IN_PLACE;
        }

        @Override
        public Enum<?> statusUponFailure() {
            return com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.LACES_NOT_IN_PLACE;
        }

    };

    private final com.github.catchitcozucan.core.ProcessStep doGetPackagingStep = new com.github.catchitcozucan.core.ProcessStep(){ 

        @Override
        public void execute() {
            doGetPackaging();
        }

        @Override
        public String processName() {
            return "SHIPASHOEPROCESS";
        }

        @Override
        public String description() {
            return "packaging";
        }

        @Override
        public Enum<?> statusUponSuccess() {
            return com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.PACKED;
        }

        @Override
        public Enum<?> statusUponFailure() {
            return com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.PACKAGING_FAILED;
        }

    };
    public static final java.util.List<java.lang.String> FAIL_STATES = java.util.Arrays.asList(
        com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.SHOE_NOT_YET_AVAILABLE.name(),
        com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.SHIPPING_FAILED.name(),
        com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.LACES_NOT_IN_PLACE.name(),
        com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.PACKAGING_FAILED.name()
    );

    public static final String PROCESS_NAME = com.github.catchitcozucan.core.demo.shoe.ShipAShoeProcess.class.getName().toUpperCase();
    public static final String PROCESS_NAME_SHORT = com.github.catchitcozucan.core.demo.shoe.ShipAShoeProcess.class.getSimpleName().toUpperCase();

    public static final Enum<?> FINISH_STATE = com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.values()[com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.values().length - 1];

    public static final com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status[] CRITERIA_STATES = {
        com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.NEW_ORDER,
        com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.SHOE_NOT_YET_AVAILABLE,
        com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.LACES_NOT_IN_PLACE,
        com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.PACKAGING_FAILED,
        com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.SHIPPING_FAILED
    };

    public static java.util.List<String> criteriaProcessesStatusesAsStrings() {
        return java.util.Arrays.asList(CRITERIA_STATES).stream().map(Enum::name).collect(java.util.stream.Collectors.toList());
    }

    public static java.util.List<String> allProcessesStatusesAsStrings() {
        return java.util.Arrays.asList(com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status.values()).stream().map(Enum::name).collect(java.util.stream.Collectors.toList());
    }

    public void processInternal(com.github.catchitcozucan.core.demo.shoe.OrderStatus.Status currentStatus) {
        switch (currentStatus) {
                case NEW_ORDER:
                case SHOE_NOT_YET_AVAILABLE:
                    executeStep(doGetShoeStep);
                    break;
                case SHOE_FETCHED_FROM_WAREHOUSE:
                case LACES_NOT_IN_PLACE:
                    executeStep(doGetLacesStep);
                    break;
                case LACES_IN_PLACE:
                case PACKAGING_FAILED:
                    executeStep(doGetPackagingStep);
                    break;
                case PACKED:
                case SHIPPING_FAILED:
                    executeStep(doSendPackageStep);
                    break;
            default:
                throw new com.github.catchitcozucan.core.exception.ProcessRuntimeException(String.format("Got bad input : %s %s which is in state %s [%s]",
                    PROCESS_NAME,
                    getSubject().id(),
                    getSubject().getCurrentStatus().name(),
                    currentStatusDescription()));
         }
    }

    //@formatter:on END DO_NOT_FORMAT

    ///////////////////////////////////////////////////////////////////////////////
    //
    // End DaProcessStepProcessor generation
    //

}